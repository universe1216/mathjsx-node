#! /usr/bin/env node

/*************************************************************************
 *
 *  mj3-tex2mml
 *
 *  Uses MathJax v3 to convert a TeX string to a MathML string.
 *
 * ----------------------------------------------------------------------
 *
 *  Copyright (c) 2018 The MathJax Consortium
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

//
//  Load the packages needed for MathJax
//
const TeX = require('mathjax3/mathjax3/input/tex.js').TeX;
const HTMLDocument = require('mathjax3/mathjax3/handlers/html/HTMLDocument.js').HTMLDocument;
const liteAdaptor = require('mathjax3/mathjax3/adaptors/liteAdaptor.js').liteAdaptor;

const AllPackages = require('mathjax3/mathjax3/input/tex/AllPackages.js').AllPackages;

//
//  Get the command-line arguments
//
var argv = require('yargs')
  .demand(0).strict()
  .usage('$0 [options] "math" > file.html')
  .options({
    inline: {
      boolean: true,
      describe: "process as display math"
    },
    packages: {
      default: AllPackages.sort().join(', '),
      describe: 'the packages to use, e.g. "base, ams"'
    }
  })
  .argv;

//
//  Create the input jax
//
const tex = new TeX({packages: argv.packages.split(/\s*,\s*/)});

//
//  Create an HTML document using a LiteDocument and the input jax
//
const html = new HTMLDocument('', liteAdaptor(), {InputJax: tex});

//
//  Create a MathML serializer
//
const MmlVisitor = require('mathjax3/mathjax3/core/MmlTree/SerializedMmlVisitor.js').SerializedMmlVisitor;
const visitor = new MmlVisitor();
const toMathML = (node => visitor.visitTree(node, html));

//
//  Typeset a TeX string and return the serialized MathML
//
const Typeset = (string, display) => {
    const math = new html.options.MathItem(string, tex, display);
    math.compile(html);
    return toMathML(math.root);
};

//
//  Convert the math provided by the user
//
console.log(Typeset(argv._[0] || '', !argv.inline));

